//fuente:


/* Utiliza la función de pin capacitivo
para leer la capacitancia en los botones pulsadores
Conectado a los pines 0 a 13
Imprime los valores en el monitor serie.
*/

uint8_t PinStatus;
uint8_t cycles ;
byte i;

void setup ()
{
Serial.begin(57600);
}

void loop ()
{
for (i=0;i<=13;i++) {
PinStatus= readCapacitivePin (i) ;
Serial.print (PinStatus) ;
Serial.print(" ");
}
Serial.println();

}

// readCapacitivePin
// Entrada: número de pin de Arduino
// Salida: un número, del 0 al 17 que expresa
// cuánta capacitancia hay en el pin
// Cuando toca el pin, o lo que sea que tenga
// adjunto, el el número será mayor

// #include "pins_arduino.h" // Arduino pre-1.0 necesita esto

uint8_t readCapacitivePin(int pinToMeasure) {

// Variables utilizadas para traducir de Arduino a pin AVR nombrando
volatile uint8_t* port;
volatile uint8_t* ddr;
volatile uint8_t* pin;

// Aquí traducimos el número de pin de entrada del
// número de pin de Arduino al AVR PORT, PIN, DDR,
// y qué bits de esos registros nos interesan.
byte bitmask;
port = portOutputRegister(digitalPinToPort(pinToMeasure));
ddr = portModeRegister(digitalPinToPort(pinToMeasure));
bitmask = digitalPinToBitMask(pinToMeasure);
pin = portInputRegister(digitalPinToPort(pinToMeasure));


// Primero descargue el pin configurándolo bajo y emitiendo
*port &= ~(bitmask);
*ddr |= bitmask;
delay(1);

// Convierte el pin en una entrada con el pull-up interno en
*ddr &= ~(bitmask);
*port |= bitmask;

// Ahora vea cuánto tiempo se levanta el alfiler. Este despliegue manual del bucle
// disminuye el número de ciclos de hardware entre cada lectura del pin,
// aumentando así la sensibilidad.

uint8_t cycles = 17;
if (*pin & bitmask) { cycles = 0;}
else if (*pin & bitmask) { cycles = 1;}
else if (*pin & bitmask) { cycles = 2;}
else if (*pin & bitmask) { cycles = 3;}
else if (*pin & bitmask) { cycles = 4;}
else if (*pin & bitmask) { cycles = 5;}
else if (*pin & bitmask) { cycles = 6;}
else if (*pin & bitmask) { cycles = 7;}
else if (*pin & bitmask) { cycles = 8;}
else if (*pin & bitmask) { cycles = 9;}
else if (*pin & bitmask) { cycles = 10;}
else if (*pin & bitmask) { cycles = 11;}
else if (*pin & bitmask) { cycles = 12;}
else if (*pin & bitmask) { cycles = 13;}
else if (*pin & bitmask) { cycles = 14;}
else if (*pin & bitmask) { cycles = 15;}
else if (*pin & bitmask) { cycles = 16;}

// Descargue el pin nuevamente configurándolo bajo y salida
// Es importante dejar los pines bajos si quiere
// poder tocar más de 1 sensor a la vez - si
// el sensor se deja alto, cuando toca
// dos sensores, su cuerpo transferirá la carga entre
// sensores.
*port &= ~(bitmask);
*ddr |= bitmask;

return cycles;
